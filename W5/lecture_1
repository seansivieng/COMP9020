# COMP9020: Set Theory and Logic - Lecture Notes

## 1. Introduction and Review
- Today's topic builds on predicate logic, models, and propositional connectives.
- Set theory introduces **new notation** and **terminology**, but the **core logical ideas remain consistent**.

## 2. Set Notation and Definitions

### 2.1 Set Builder Notation
- `{x ∈ S | P(x)}`: Set of all elements `x` in set `S` such that property `P` holds.
- Alternatives include semicolons (`;`) and vertical bars (`|`); semicolons preferred.

### 2.2 Subsets and Set Identity
- **Subset**: `A ⊆ B ⇔ ∀x (x ∈ A → x ∈ B)`
- **Not a Subset**: `A ⊈ B ⇔ ∃x (x ∈ A ∧ x ∉ B)`
- **Proper Subset**: `A ⊂ B ⇔ A ⊆ B ∧ ∃x (x ∈ B ∧ x ∉ A)`
- **Set Equality**: `A = B ⇔ A ⊆ B ∧ B ⊆ A`
- **Note**: `A ⊂ B ∧ B ⊂ A` is a contradiction.

## 3. Integer Set Example
Given:
- `A = {m ∈ ℤ | m = 2a for some a ∈ ℤ}`
- `B = {n ∈ ℤ | n = 2b − 2 for some b ∈ ℤ}`

**Proof**: Show `A ⊆ B` and `B ⊆ A` by substitution.

## 4. Operations on Sets

### 4.1 Basic Operations
- **Union**: `A ∪ B = {x ∈ U | x ∈ A ∨ x ∈ B}`
- **Intersection**: `A ∩ B = {x ∈ U | x ∈ A ∧ x ∈ B}`
- **Difference**: `B − A = {x ∈ B | x ∉ A}`
- **Complement**: `¬A = {x ∈ U | x ∉ A}`

### 4.2 Indexed Families
- `⋃_{i=1}^{n} A_i = {x ∈ U | ∃i (x ∈ A_i)}`
- `⋂_{i=1}^{n} A_i = {x ∈ U | ∀i (x ∈ A_i)}`

## 5. The Empty Set
- Notation: `∅` or `{}`.
- Important: `{∅} ≠ ∅`
- All empty sets are equal since they have no elements.

## 6. Russell’s Paradox
- Naive set theory allows unrestricted comprehension → paradox.
- `R = {x | x ∉ x}` leads to contradiction.
- Modern set theory restricts comprehension (iterative conception).

## 7. Partitions and Disjoint Sets
- **Disjoint**: `A ∩ B = ∅`
- **Pairwise Disjoint**: `A_i ∩ A_j = ∅` for all `i ≠ j`
- **Partition**: Union of pairwise disjoint, non-empty sets equals the original set.

## 8. Power Set
- `P(A) = {X | X ⊆ A}`
- If `|A| = n`, then `|P(A)| = 2^n`

## 9. Set Algebra Properties

### 9.1 Basic Laws

**Commutative**:
- `A ∪ B = B ∪ A`
- `A ∩ B = B ∩ A`

**Associative**:
- `(A ∪ B) ∪ C = A ∪ (B ∪ C)`
- `(A ∩ B) ∩ C = A ∩ (B ∩ C)`

**Distributive**:
- `A ∪ (B ∩ C) = (A ∪ B) ∩ (A ∪ C)`
- `A ∩ (B ∪ C) = (A ∩ B) ∪ (A ∩ C)`

**Identity**:
- `A ∪ ∅ = A`
- `A ∩ U = A`

**Domination**:
- `A ∪ U = U`
- `A ∩ ∅ = ∅`

**Complement**:
- `A ∪ ¬A = U`
- `A ∩ ¬A = ∅`

**Double Complement**:
- `¬(¬A) = A`

**Idempotent**:
- `A ∪ A = A`
- `A ∩ A = A`

**Absorption**:
- `A ∪ (A ∩ B) = A`
- `A ∩ (A ∪ B) = A`

**De Morgan’s Laws**:
- `¬(A ∪ B) = ¬A ∩ ¬B`
- `¬(A ∩ B) = ¬A ∪ ¬B`

**Set Difference**:
- `A − B = A ∩ ¬B`

## 10. Subsets as Logical Consequence
- `⊆` behaves like `⇒` (logical consequence)
- `⊆` is a **partial order**:
  - Reflexive
  - Transitive
  - Antisymmetric

## 11. Ordered Pairs and Cartesian Products
- Ordered pair: `⟨x, y⟩ ∈ A × B ⇔ x ∈ A ∧ y ∈ B`
- Angle brackets used for clarity: `⟨ , ⟩`

## 12. Functions and Relations
- All functions are relations, but not all relations are functions.
- Relations may have multiple outputs for one input.
- Functions must map each input to **exactly one output**.

**Predicate Extensions**:
- Unary: set of objects
- Binary: set of ordered pairs
- n-ary: set of ordered n-tuples

## 13. Exam and Problem Set Information
- No midterm. 8 problem sets total.
- Problem Set 4 due **after** Flex week.
- Final exam: pen-and-paper, **open book** (bring any notes).
- Practice exams: actual + supplementary + mock.
- Strategy: do easy questions first, revisit harder ones later.

## 14. Encouragement and Outlook
- You've completed the most abstract parts: logic foundations.
- From here: applications of logic (functions, probability, graphs).
- Future topics include:
  - Regular and conditional probability
  - Graph theory (relations as diagrams)
  - Functions as special cases of relations

## 15. Closing Notes
- Practice under exam conditions (2 hrs).
- Don’t rely on answers—**working through** is more valuable.
- Exam is a **hurdle requirement**: must pass to pass the course.
- Keep calm and **problem-solve actively**.
